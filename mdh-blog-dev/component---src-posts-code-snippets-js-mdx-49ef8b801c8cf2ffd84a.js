"use strict";(self.webpackChunkmydatahack_blog_site_gatsby=self.webpackChunkmydatahack_blog_site_gatsby||[]).push([[383],{9626:function(n,a,s){s.d(a,{ah:function(){return l}});var t=s(4942),e=s(7294);function p(n,a){var s=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),s.push.apply(s,t)}return s}function o(n){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?p(Object(s),!0).forEach((function(a){(0,t.Z)(n,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(s)):p(Object(s)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(s,a))}))}return n}var c=e.createContext({});function l(n){var a=e.useContext(c);return e.useMemo((function(){return"function"==typeof n?n(a):o(o({},a),n)}),[a,n])}},9500:function(n,a,s){s.r(a);var t=s(9626),e=s(7294),p=s(9678),o=function(n){var a=n.children,s=n.pageContext;return e.createElement(p.j,{pageContext:s},a)};function c(n){var a=Object.assign({h2:"h2",p:"p",div:"div"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.h2,null,"1. Grid component for Material UI"),"\n",e.createElement(a.p,null,"I was trying to figure out how the ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;Grid></code>'}})," component calculate the width. It is in ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gridGenerator.ts</code>'}}),". It seems to calculate the percentage."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateGridSizeStyles</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> ownerState <span class="token punctuation">}</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> getSelfSpacing <span class="token operator">=</span> <span class="token function">createGetSelfSpacing</span><span class="token punctuation">(</span>ownerState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  traverseBreakpoints<span class="token operator">&lt;</span><span class="token string">\'auto\'</span> <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token boolean">true</span><span class="token operator">></span><span class="token punctuation">(</span>\n    theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">,</span>\n    ownerState<span class="token punctuation">.</span>gridSize<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token parameter">appendStyle<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        style <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">flexBasis</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">flexGrow</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token string">\'100%\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">\'auto\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        style <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">flexBasis</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">flexGrow</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">flexShrink</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">maxWidth</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        style <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">flexGrow</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">flexBasis</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">calc(100% * </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> / </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getParentColumns</span><span class="token punctuation">(</span>ownerState<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n            <span class="token function">isNestedContainer</span><span class="token punctuation">(</span>ownerState<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getSelfSpacing</span><span class="token punctuation">(</span><span class="token string">\'column\'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">\'\'</span>\n          <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">appendStyle</span><span class="token punctuation">(</span>styles<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> styles<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lg</code>'}})," (or ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">md</code>'}}),", ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sm</code>'}}),", or ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">xm</code>'}}),") takes either ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GridSize</code>'}})," or ",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">boolean</code>'}}),"."),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">GridSize</span> <span class="token operator">=</span> <span class="token string">\'auto\'</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RegularBreakpoints</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can\'t be greater than the total number of columns of the container (12 by default).\n   * If \'auto\', the grid item\'s width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item\'s width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */</span>\n  lg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> GridSize<span class="token punctuation">;</span>\n\n<span class="token operator">...</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Table APIs"),"\n",e.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableRow</span></span>  <span class="token punctuation">/></span></span><span class="token plain-text"> \n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableRow</span></span>  <span class="token punctuation">/></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableRow</span></span>  <span class="token punctuation">/></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TableRow</span></span> <span class="token attr-name">span</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token constant">SM</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">LG</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">with</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>67px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text"> -> with: 2/12 %\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Table</span></span><span class="token punctuation">></span></span></code></pre></div>'}}))}a.default=function(n){return void 0===n&&(n={}),e.createElement(o,n,e.createElement(c,n))}},9678:function(n,a,s){s.d(a,{j:function(){return p}});var t=s(5021),e=s(5893),p=function(n){var a=n.children,s=n.pageContext.frontmatter,p=s.title,o=s.description;return(0,e.jsx)(t.A,{siteTitle:p,description:o,children:a})}}}]);
//# sourceMappingURL=component---src-posts-code-snippets-js-mdx-49ef8b801c8cf2ffd84a.js.map