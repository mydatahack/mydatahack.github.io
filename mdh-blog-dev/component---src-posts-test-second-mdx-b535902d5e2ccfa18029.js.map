{"version":3,"file":"component---src-posts-test-second-mdx-b535902d5e2ccfa18029.js","mappings":"wLAIA,MAAMA,EAAYC,IAAA,IAAC,SAACC,EAAQ,YAAEC,GAAYF,EAAA,OAAKG,EAAAA,cAAoBC,EAAAA,EAAY,CAC7EF,YAAaA,GACZD,EAAS,EACZ,SAASI,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,QACJC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOX,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBI,EAAYG,GAAI,KAAM,gCAAiC,KAAMP,EAAAA,cAAoBI,EAAYI,EAAG,KAAM,kDAAmD,KAAMR,EAAAA,cAAoBI,EAAYK,IAAK,CACvQG,wBAAyB,CACvBC,OAAQ,6zCAGd,CAIA,UAHA,SAAoBV,GAClB,YADuB,IAALA,IAAAA,EAAQ,CAAC,GACpBH,EAAAA,cAAoBJ,EAAWO,EAAOH,EAAAA,cAAoBE,EAAmBC,GACtF,C,8ECZO,MAAMF,EAAaJ,IAAiD,IAAhD,SAAEC,EAAQ,YAAEC,GAA8BF,EAGnE,MAAM,MAAEiB,EAAK,YAAEC,GAAgBhB,EAAYiB,YAE3C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,UAAWL,EAAOC,YAAaA,EAAYjB,SAChDA,GACM,C,sECgBN,MAAMsB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBV,GAC/B,MAAMW,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfT,EACFA,EAAWW,GAGb,IAAIA,KAAsBX,IAChC,CAACW,EAAmBX,GACzB,C","sources":["webpack://mydatahack-blog-site-gatsby/./src/posts/test/second.mdx","webpack://mydatahack-blog-site-gatsby/./src/components/PostLayout/PostLayout.tsx","webpack://mydatahack-blog-site-gatsby/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {PostLayout} from \"../../components/PostLayout\";\nconst MDXLayout = ({children, pageContext}) => React.createElement(PostLayout, {\n  pageContext: pageContext\n}, children);\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Hello Universe - Second Post\"), \"\\n\", React.createElement(_components.p, null, \"this my second blog. Code block not working...\"), \"\\n\", React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> context <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token literal-property property\\\">a</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">b</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token literal-property property\\\">c</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>contextObj <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>contextObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  return React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props));\n}\nexport default MDXContent;\n","import { ReactNode } from 'react'\n\nimport { Layout } from '../Layout'\n\ninterface PostLayoutProps {\n  children: ReactNode\n  pageContext: any\n}\n\nexport const PostLayout = ({ children, pageContext }: PostLayoutProps) => {\n  // When we have error here for undefined title, we need to stop and start gatsby.\n  // then, it will register the values in frontmatter\n  const { title, description } = pageContext.frontmatter\n\n  return (\n    <Layout siteTitle={title} description={description}>\n      {children}\n    </Layout>\n  )\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["MDXLayout","_ref","children","pageContext","React","PostLayout","_createMdxContent","props","_components","Object","assign","h1","p","div","_provideComponents","components","dangerouslySetInnerHTML","__html","title","description","frontmatter","_jsx","Layout","siteTitle","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}