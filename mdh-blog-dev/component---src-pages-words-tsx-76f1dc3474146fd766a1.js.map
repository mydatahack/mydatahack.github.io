{"version":3,"file":"component---src-pages-words-tsx-76f1dc3474146fd766a1.js","mappings":"0hmBAEMA,EAAeC,EAAAA,QAAAA,OAAAA,WAAH,yEAAGA,CAAH,2KAkBLC,EAAmD,SAAC,GAE1D,IADLC,EACI,EADJA,QAEMC,EAAiB,WACrBD,GADF,EAGA,OACEE,EAAAA,EAAAA,KAACL,EAAD,CAAcM,KAAK,SAASH,QAAS,kBAAMC,GAA3C,wBAPG,EChBMG,EAAcN,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,kBAIXO,EAA6BP,EAAAA,QAAAA,IAAAA,WAAH,6EAAGA,CAAH,8FCR1BQ,EAAa,aACbC,EAAe,eACfC,EAAuB,uBACvBC,EAAa,aACbC,EAAS,SACTC,EAAS,SAETC,EAAU,CACrBN,EACAC,EACAC,EACAC,EACAC,EACAC,GCVWE,EAA2Bf,EAAAA,QAAAA,IAAAA,WAAH,qFAAGA,CAAH,wDAEdgB,EAAAA,GAAAA,ICOVC,EAAiB,SAAC,GAGF,IAF3BC,EAE0B,EAF1BA,eACAC,EAC0B,EAD1BA,SAEA,OACEC,EAAAA,EAAAA,MAAAA,QAAAA,CAAOC,QAAQ,OAAf,+BACmBjB,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,IACjBA,EAAAA,EAAAA,KAAAA,SAAAA,CACEkB,KAAK,OACLC,GAAG,OACH,cAAY,kBACZC,MAAON,EACPC,SAAU,SAACM,GAAD,OAAON,EAASM,EAAEC,OAAOF,MALrC,WAOGV,EAAQa,KAAI,SAACC,GAAD,OACXxB,EAAAA,EAAAA,KAAAA,SAAAA,CAAqBoB,MAAOI,EAA5B,SACGA,GADUA,EADd,QAdF,ECgBMC,EAAuB,WAClC,OAAgCC,EAAAA,EAAAA,WAAS,GAAlCC,EAAP,KAAiBC,EAAjB,KACA,GACEF,EAAAA,EAAAA,UAAwBtB,GADnBU,EAAP,KAAuBe,EAAvB,KAOA,OACEb,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAA,SAAAA,EACEhB,EAAAA,EAAAA,KAACG,EAAD,WACEH,EAAAA,EAAAA,KAACa,EAAD,CACEC,eAAgBA,EAChBC,SAAUc,OAGdb,EAAAA,EAAAA,MAACb,EAAD,WACGW,IAAmBV,IAAcJ,EAAAA,EAAAA,KAAC8B,EAAAA,GAAD,CAAgBC,QAASC,EAAAA,IAC1DlB,IAAmBT,IAClBL,EAAAA,EAAAA,KAAC8B,EAAAA,GAAD,CAAgBC,QAASE,EAAAA,IAE1BnB,IAAmBR,IAClBN,EAAAA,EAAAA,KAACkC,EAAAA,GAAD,CAA6BH,QAASI,EAAAA,IAEvCrB,IAAmBP,IAClBP,EAAAA,EAAAA,KAACoC,EAAAA,GAAD,CAAYL,QAASM,EAAAA,IAEtBvB,IAAmBN,IAAUR,EAAAA,EAAAA,KAACoC,EAAAA,GAAD,CAAYL,QAASO,EAAAA,IAClDxB,IAAmBL,IAClBT,EAAAA,EAAAA,KAACuC,EAAAA,GAAD,CAAgBR,QAASS,EAAAA,KAE3BxC,EAAAA,EAAAA,KAACW,EAAD,WACEX,EAAAA,EAAAA,KAACH,EAAD,CAAiBC,QA5BF,WACrB8B,GAAaD,EADf,WALK,E,SCRP,EAd4B,WAC1B,OACEX,EAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAAyB,SAAAA,EACEzC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAD,KACA1C,EAAAA,EAAAA,KAAAA,OAAAA,CAAAyC,UACEzB,EAAAA,EAAAA,MAAC2B,EAAAA,GAAD,CAAAF,SAAAA,EACEzC,EAAAA,EAAAA,KAACE,EAAD,KACAF,EAAAA,EAAAA,KAACyB,EAAD,WAPV,C","sources":["webpack://mydatahack-blog-site-gatsby/./src/fec/Buttons/RandomiseButton/RandomiseButton.tsx","webpack://mydatahack-blog-site-gatsby/./src/fec/Space/index.tsx","webpack://mydatahack-blog-site-gatsby/./src/components/FlipCards/const.ts","webpack://mydatahack-blog-site-gatsby/./src/components/FlipCards/FlipCards.styled.tsx","webpack://mydatahack-blog-site-gatsby/./src/components/FlipCards/FlipCardSelect/FlipCardSelect.tsx","webpack://mydatahack-blog-site-gatsby/./src/components/FlipCards/FlipCards.tsx","webpack://mydatahack-blog-site-gatsby/./src/pages/words.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  width: 100px;\n  height: 30px;\n  border: 1px solid #04aa6d;\n  cursor: pointer;\n  background-color: white;\n  color: #04aa6d;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #04aa6d;\n    color: white;\n  }\n`\n\ninterface RandomiseButtonProps {\n  onClick: () => void\n}\nexport const RandomiseButton: React.VFC<RandomiseButtonProps> = ({\n  onClick,\n}) => {\n  const onClickHandler = () => {\n    onClick()\n  }\n  return (\n    <StyledButton role=\"button\" onClick={() => onClickHandler()}>\n      Randomise\n    </StyledButton>\n  )\n}\n","import styled from 'styled-components'\n\nimport { BREAKPOINT } from '../styles'\n\nexport const StyledSpace = styled.div`\n  margin: 30px;\n`\n\nexport const StyledContainerForFlipCard = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n","export const VOCABULARY = 'Vocabulary'\nexport const VOCABULARY_2 = 'Vocabulary 2'\nexport const PHRASES_AND_GRAMMARS = 'Phrases and Grammars'\nexport const FIRST_LINE = 'First Line'\nexport const QUOTES = 'Quotes'\nexport const TRIVIA = 'Trivia'\n\nexport const OPTIONS = [\n  VOCABULARY,\n  VOCABULARY_2,\n  PHRASES_AND_GRAMMARS,\n  FIRST_LINE,\n  QUOTES,\n  TRIVIA,\n]\n","import { BREAKPOINT } from '@mdhnpm/react-mdh-blog-components'\nimport styled from 'styled-components'\n\nexport const RandomiseButtonContainer = styled.div`\n  margin: 0;\n  @media (min-width: ${BREAKPOINT.SM}px) {\n    margin-top: 20px;\n  }\n`\n","import React from 'react'\n\nimport { OPTIONS } from '../const'\nimport { SelectOptions } from '../FlipCards.types'\n\ninterface FlipCardsSelectProps {\n  selectedOption: SelectOptions\n  onChange: (value: SelectOptions) => void\n}\n\n// It's not a good idea to have the option array tightly coupled with the component.\n// OPTION should be a prop to make it more component like.\nexport const FlipCardSelect = ({\n  selectedOption,\n  onChange,\n}: FlipCardsSelectProps) => {\n  return (\n    <label htmlFor=\"card\">\n      Select Category: <br />\n      <select\n        name=\"card\"\n        id=\"card\"\n        data-testid=\"flipcard-select\"\n        value={selectedOption}\n        onChange={(e) => onChange(e.target.value as SelectOptions)}\n      >\n        {OPTIONS.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </select>\n    </label>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  FlipCardsPhrasesAndGrammars,\n  FlipCardsQAndA,\n  FlipCardsVocab,\n  QuoteCards,\n} from '@mdhnpm/react-mdh-blog-components'\n\nimport firstLine from '../../data/flip-cards/firstLine.json'\nimport phrase from '../../data/flip-cards/phraseAndGrammars.json'\nimport quotes from '../../data/flip-cards/quotes.json'\nimport trivia from '../../data/flip-cards/trivia.json'\nimport { words } from '../../data/flip-cards/words.json'\nimport { wordsArchived } from '../../data/flip-cards/words-archived.json'\nimport { RandomiseButton } from '../../fec/Buttons'\nimport { StyledContainerForFlipCard } from '../../fec/Space'\nimport {\n  FIRST_LINE,\n  PHRASES_AND_GRAMMARS,\n  QUOTES,\n  TRIVIA,\n  VOCABULARY,\n  VOCABULARY_2,\n} from './const'\nimport { RandomiseButtonContainer } from './FlipCards.styled'\nimport { SelectOptions } from './FlipCards.types'\nimport { FlipCardSelect } from './FlipCardSelect'\n\nexport const FlipCards: React.VFC = () => {\n  const [reRender, setReRender] = useState(false)\n  const [selectedOption, setSelectedOption] =\n    useState<SelectOptions>(VOCABULARY)\n\n  const onClickHandler = () => {\n    setReRender(!reRender)\n  }\n\n  return (\n    <>\n      <StyledContainerForFlipCard>\n        <FlipCardSelect\n          selectedOption={selectedOption}\n          onChange={setSelectedOption}\n        />\n      </StyledContainerForFlipCard>\n      <StyledContainerForFlipCard>\n        {selectedOption === VOCABULARY && <FlipCardsVocab content={words} />}\n        {selectedOption === VOCABULARY_2 && (\n          <FlipCardsVocab content={wordsArchived} />\n        )}\n        {selectedOption === PHRASES_AND_GRAMMARS && (\n          <FlipCardsPhrasesAndGrammars content={phrase.phrasesAndGrammars} />\n        )}\n        {selectedOption === FIRST_LINE && (\n          <QuoteCards content={firstLine.firstLine} />\n        )}\n        {selectedOption === QUOTES && <QuoteCards content={quotes.quotes} />}\n        {selectedOption === TRIVIA && (\n          <FlipCardsQAndA content={trivia.trivia} />\n        )}\n        <RandomiseButtonContainer>\n          <RandomiseButton onClick={onClickHandler} />\n        </RandomiseButtonContainer>\n      </StyledContainerForFlipCard>\n    </>\n  )\n}\n","import React from 'react'\n\nimport { FlipCards } from '../components/FlipCards'\nimport { ContentContainer, GlobalStyles } from '../fec'\nimport { StyledSpace } from '../fec/Space'\n\nconst WordsPage: React.FC = () => {\n  return (\n    <>\n      <GlobalStyles />\n      <main>\n        <ContentContainer>\n          <StyledSpace />\n          <FlipCards />\n        </ContentContainer>\n      </main>\n    </>\n  )\n}\n\nexport default WordsPage\n"],"names":["StyledButton","styled","RandomiseButton","onClick","onClickHandler","_jsx","role","StyledSpace","StyledContainerForFlipCard","VOCABULARY","VOCABULARY_2","PHRASES_AND_GRAMMARS","FIRST_LINE","QUOTES","TRIVIA","OPTIONS","RandomiseButtonContainer","BREAKPOINT","FlipCardSelect","selectedOption","onChange","_jsxs","htmlFor","name","id","value","e","target","map","option","FlipCards","useState","reRender","setReRender","setSelectedOption","FlipCardsVocab","content","words","wordsArchived","FlipCardsPhrasesAndGrammars","phrase","QuoteCards","firstLine","quotes","FlipCardsQAndA","trivia","children","GlobalStyles","ContentContainer"],"sourceRoot":""}